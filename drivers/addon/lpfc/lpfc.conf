/*******************************************************************
 * This file is part of the Emulex Linux Device Driver for         *
 * Fibre Channel Host Bus Adapters.                                *
 * Refer to the README file included with this package for         *
 * driver version and adapter support.                             *
 * Copyright (C) 2003-2005 Emulex.  All rights reserved.           *
 * www.emulex.com                                                  *
 *                                                                 *
 * This program is free software; you can redistribute it and/or   *
 * modify it under the terms of the GNU General Public License     *
 * as published by the Free Software Foundation; either version 2  *
 * of the License, or (at your option) any later version.          *
 *                                                                 *
 * This program is distributed in the hope that it will be useful, *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of  *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *
 * GNU General Public License for more details, a copy of which    *
 * can be found in the file COPYING included with this package.    *
 *******************************************************************/

/*
 * $Id: lpfc.conf 1.3 2005/05/03 11:21:10EDT sf_support Exp  $
 */


#ifndef _ETC_LPFC_CONF_
#define _ETC_LPFC_CONF_

#include "lpfc_cfgparm.h"

/**************************  GLOBAL PARMS **********************/

/* 
# Setup FCP persistent bindings,
# fcp-bind-WWPN binds a specific WorldWide PortName to a target id,
# fcp-bind-WWNN binds a specific WorldWide NodeName to a target id,
# fcp-bind-DID binds a specific DID to a target id.
# Each array must end with a NULL pointer.
# Binding method must match with the bind method of that HBA, else the
# binding will be ignored.
# scan-down should NOT be set to 2 when one of these binding methods 
# is used. 
# WWNN, WWPN and DID are hexadecimal values.
# WWNN must be 16 digit BCD with leading 0s.
# WWPN must be 16 digit BCD with leading 0s.
# DID must be 6 digit BCD with leading 0s.
# The SCSI ID to bind to consists of two parts, the lpfc interface
# to bind to, and the target number for that interface.
# Thus lpfc0t2 specifies target 2 on interface lpfc0.
#
# Here are some examples:
#                                   WWNN             SCSI ID
# char *lpfc_fcp_bind_WWNN[MAX_FC_BINDINGS]={"22000020370b8275:lpfc0t1",
#                                            "22000020370b8998:lpfc0t2",
#                                            0};
# 
#                                   WWPN             SCSI ID
# char *lpfc_fcp_bind_WWPN[MAX_FC_BINDINGS]={"22000020370b8275:lpfc0t1",
#                                            "22000020370b8998:lpfc0t2",
#                                            0};
# 
#                                   DID   SCSI ID
# char *lpfc_fcp_bind_DID[MAX_FC_BINDINGS]={"0000dc:lpfc0t1",
#                                           "0000e0:lpfc0t2",
#                                           0};
# 
*/
      
char *lpfc_fcp_bind_WWNN[MAX_FC_BINDINGS]   =  {0};

char *lpfc_fcp_bind_WWPN[MAX_FC_BINDINGS]   =  {0};

char *lpfc_fcp_bind_DID[MAX_FC_BINDINGS]    =  {0};

/************************  PER ADAPTER PARMS ********************/

/*
 * The per adapter parmaters are in the form of lpfcX_param where
 * X is the adapter number. If lpfcX_param = -1 then it will assume
 * the default value which is indicated by lpfc_param that precedes
 * that particular set of lpfcX_param's.
 */

/*
# lpfc_max_lun: Specifies the maximum number of luns per target. A value of
# 20 means luns from 0 to 19 are valid. Value range is [1,256]. Default
# value = 256.
*/
int lpfc_max_lun   = 256;
int lpfc0_max_lun  = -1;
int lpfc1_max_lun  = -1;
int lpfc2_max_lun  = -1;
int lpfc3_max_lun  = -1;
int lpfc4_max_lun  = -1;
int lpfc5_max_lun  = -1;
int lpfc6_max_lun  = -1;
int lpfc7_max_lun  = -1;
int lpfc8_max_lun  = -1;
int lpfc9_max_lun  = -1;
int lpfc10_max_lun = -1;
int lpfc11_max_lun = -1;
int lpfc12_max_lun = -1;
int lpfc13_max_lun = -1;
int lpfc14_max_lun = -1;
int lpfc15_max_lun = -1;
int lpfc16_max_lun = -1;
int lpfc17_max_lun = -1;
int lpfc18_max_lun = -1;
int lpfc19_max_lun = -1;
int lpfc20_max_lun = -1;
int lpfc21_max_lun = -1;
int lpfc22_max_lun = -1;
int lpfc23_max_lun = -1;
int lpfc24_max_lun = -1;
int lpfc25_max_lun = -1;
int lpfc26_max_lun = -1;
int lpfc27_max_lun = -1;
int lpfc28_max_lun = -1;
int lpfc29_max_lun = -1;
int lpfc30_max_lun = -1;
int lpfc31_max_lun = -1;

/*
# Specifies the maximum number of ELS cmds we can have outstanding (for 
# discovery). Value range is [1,64]. Default value = 1.
*/
int lpfc_discovery_threads   =  1;
int lpfc0_discovery_threads  = -1;
int lpfc1_discovery_threads  = -1;
int lpfc2_discovery_threads  = -1;
int lpfc3_discovery_threads  = -1;
int lpfc4_discovery_threads  = -1;
int lpfc5_discovery_threads  = -1;
int lpfc6_discovery_threads  = -1;
int lpfc7_discovery_threads  = -1;
int lpfc8_discovery_threads  = -1;
int lpfc9_discovery_threads  = -1;
int lpfc10_discovery_threads = -1;
int lpfc11_discovery_threads = -1;
int lpfc12_discovery_threads = -1;
int lpfc13_discovery_threads = -1;
int lpfc14_discovery_threads = -1;
int lpfc15_discovery_threads = -1;
int lpfc16_discovery_threads = -1;
int lpfc17_discovery_threads = -1;
int lpfc18_discovery_threads = -1;
int lpfc19_discovery_threads = -1;
int lpfc20_discovery_threads = -1;
int lpfc21_discovery_threads = -1;
int lpfc22_discovery_threads = -1;
int lpfc23_discovery_threads = -1;
int lpfc24_discovery_threads = -1;
int lpfc25_discovery_threads = -1;
int lpfc26_discovery_threads = -1;
int lpfc27_discovery_threads = -1;
int lpfc28_discovery_threads = -1;
int lpfc29_discovery_threads = -1;
int lpfc30_discovery_threads = -1;
int lpfc31_discovery_threads = -1;

/*
# lpfc_max_target: This configuration parameter limits how many targets/luns
# the driver will support. Value range is [1,256]. Default value = 256.
*/
int  lpfc_max_target  = 256;
int  lpfc0_max_target  = -1;
int  lpfc1_max_target  = -1;
int  lpfc2_max_target  = -1;
int  lpfc3_max_target  = -1;
int  lpfc4_max_target  = -1;
int  lpfc5_max_target  = -1;
int  lpfc6_max_target  = -1;
int  lpfc7_max_target  = -1;
int  lpfc8_max_target  = -1;
int  lpfc9_max_target  = -1;
int  lpfc10_max_target = -1;
int  lpfc11_max_target = -1;
int  lpfc12_max_target = -1;
int  lpfc13_max_target = -1;
int  lpfc14_max_target = -1;
int  lpfc15_max_target = -1;
int  lpfc16_max_target = -1;
int  lpfc17_max_target = -1;
int  lpfc18_max_target = -1;
int  lpfc19_max_target = -1;
int  lpfc20_max_target = -1;
int  lpfc21_max_target = -1;
int  lpfc22_max_target = -1;
int  lpfc23_max_target = -1;
int  lpfc24_max_target = -1;
int  lpfc25_max_target = -1;
int  lpfc26_max_target = -1;
int  lpfc27_max_target = -1;
int  lpfc28_max_target = -1;
int  lpfc29_max_target = -1;
int  lpfc30_max_target = -1;
int  lpfc31_max_target = -1;

/*
# lpfc_fcp_bind_method: It specifies the method of binding to be used for each
# port. This  binding method is used for persistent binding and automaped 
# binding. A value of 1 will force WWNN binding, value of 2 will force WWPN
# binding, value of 3 will force DID binding and value of 4 will force the
# driver to derive binding from ALPA. Any persistent binding whose type does
# not match with the bind method of the port will be ignored. Value range 
# is [1,4]. Default value is 2.
*/
int  lpfc_fcp_bind_method   =  2;
int  lpfc0_fcp_bind_method  = -1;
int  lpfc1_fcp_bind_method  = -1;
int  lpfc2_fcp_bind_method  = -1;
int  lpfc3_fcp_bind_method  = -1;
int  lpfc4_fcp_bind_method  = -1;
int  lpfc5_fcp_bind_method  = -1;
int  lpfc6_fcp_bind_method  = -1;
int  lpfc7_fcp_bind_method  = -1;
int  lpfc8_fcp_bind_method  = -1;
int  lpfc9_fcp_bind_method  = -1;
int  lpfc10_fcp_bind_method = -1;
int  lpfc11_fcp_bind_method = -1;
int  lpfc12_fcp_bind_method = -1;
int  lpfc13_fcp_bind_method = -1;
int  lpfc14_fcp_bind_method = -1;
int  lpfc15_fcp_bind_method = -1;
int  lpfc16_fcp_bind_method = -1;
int  lpfc17_fcp_bind_method = -1;
int  lpfc18_fcp_bind_method = -1;
int  lpfc19_fcp_bind_method = -1;
int  lpfc20_fcp_bind_method = -1;
int  lpfc21_fcp_bind_method = -1;
int  lpfc22_fcp_bind_method = -1;
int  lpfc23_fcp_bind_method = -1;
int  lpfc24_fcp_bind_method = -1;
int  lpfc25_fcp_bind_method = -1;
int  lpfc26_fcp_bind_method = -1;
int  lpfc27_fcp_bind_method = -1;
int  lpfc28_fcp_bind_method = -1;
int  lpfc29_fcp_bind_method = -1;
int  lpfc30_fcp_bind_method = -1;
int  lpfc31_fcp_bind_method = -1;

/*
# If automap is set, SCSI IDs for all FCP nodes without
# persistent bindings will be automatically generated.
# If new FCP devices are added to the network when the system is down,
# there is no guarantee that these SCSI IDs will remain the same
# when the system is booted again. 
# The bind method of the port is used as the binding method of
# automap devices to preserve SCSI IDs between link down and link up.
# If automap is 0, only devices with persistent bindings will be
# recognized by the system. User can change the automap property
# of port instance X by changing the value of lpfcX_automap parameter.
# Value range is [0,1]. Default value is 1.
*/
int  lpfc_automap   =  1;
int  lpfc0_automap  = -1;
int  lpfc1_automap  = -1;
int  lpfc2_automap  = -1;
int  lpfc3_automap  = -1;
int  lpfc4_automap  = -1;
int  lpfc5_automap  = -1;
int  lpfc6_automap  = -1;
int  lpfc7_automap  = -1;
int  lpfc8_automap  = -1;
int  lpfc9_automap  = -1;
int  lpfc10_automap = -1;
int  lpfc11_automap = -1;
int  lpfc12_automap = -1;
int  lpfc13_automap = -1;
int  lpfc14_automap = -1;
int  lpfc15_automap = -1;
int  lpfc16_automap = -1;
int  lpfc17_automap = -1;
int  lpfc18_automap = -1;
int  lpfc19_automap = -1;
int  lpfc20_automap = -1;
int  lpfc21_automap = -1;
int  lpfc22_automap = -1;
int  lpfc23_automap = -1;
int  lpfc24_automap = -1;
int  lpfc25_automap = -1;
int  lpfc26_automap = -1;
int  lpfc27_automap = -1;
int  lpfc28_automap = -1;
int  lpfc29_automap = -1;
int  lpfc30_automap = -1;
int  lpfc31_automap = -1;

/*
# Some disk devices have a "select ID" or "select Target" capability.
# From a protocol standpoint "select ID" usually means select the
# Fibre channel "ALPA".  In the FC-AL Profile there is an "informative
# annex" which contains a table that maps a "select ID" (a number
# between 0 and 7F) to an ALPA.  By default, for compatibility with
# older drivers, the lpfc driver scans this table from low ALPA to high
# ALPA.
#
# Turning on the scan-down variable (on  = 1, off = 0) will
# cause the lpfc driver to use an inverted table, effectively
# scanning ALPAs from high to low. Value range is [0,1]. Default value is 1.
#
# (Note: This "select ID" functionality is a LOOP ONLY characteristic
# and will not work across a fabric. Also this parameter will take
# effect only in the case when ALPA map is not available.)
*/
int  lpfc_scan_down    =  1;
int  lpfc0_scan_down   = -1;
int  lpfc1_scan_down   = -1;
int  lpfc2_scan_down   = -1;
int  lpfc3_scan_down   = -1;
int  lpfc4_scan_down   = -1;
int  lpfc5_scan_down   = -1;
int  lpfc6_scan_down   = -1;
int  lpfc7_scan_down   = -1;
int  lpfc8_scan_down   = -1;
int  lpfc9_scan_down   = -1;
int  lpfc10_scan_down  = -1;
int  lpfc11_scan_down  = -1;
int  lpfc12_scan_down  = -1;
int  lpfc13_scan_down  = -1;
int  lpfc14_scan_down  = -1;
int  lpfc15_scan_down  = -1;
int  lpfc16_scan_down  = -1;
int  lpfc17_scan_down  = -1;
int  lpfc18_scan_down  = -1;
int  lpfc19_scan_down  = -1;
int  lpfc20_scan_down  = -1;
int  lpfc21_scan_down  = -1;
int  lpfc22_scan_down  = -1;
int  lpfc23_scan_down  = -1;
int  lpfc24_scan_down  = -1;
int  lpfc25_scan_down  = -1;
int  lpfc26_scan_down  = -1;
int  lpfc27_scan_down  = -1;
int  lpfc28_scan_down  = -1;
int  lpfc29_scan_down  = -1;
int  lpfc30_scan_down  = -1;
int  lpfc31_scan_down  = -1;

/*
# lpfc_log_verbose: Only turn this flag on if you are willing to risk being
# deluged with LOTS of information.
# You can set a bit mask to record specific types of verbose messages:
#
# LOG_ELS                       0x1        ELS events
# LOG_DISCOVERY                 0x2        Link discovery events
# LOG_MBOX                      0x4        Mailbox events
# LOG_INIT                      0x8        Initialization events
# LOG_LINK_EVENT                0x10       Link events
# LOG_FCP                       0x40       FCP traffic history
# LOG_NODE                      0x80       Node table events
# LOG_MISC                      0x400      Miscellaneous events
# LOG_SLI                       0x800      SLI events
# LOG_CHK_COND                  0x1000     FCP Check condition flag
# LOG_LIBDFC                    0x2000     LIBDFC events
# LOG_ALL_MSG                   0xffff     LOG all messages
*/
int  lpfc_log_verbose   =  0x0;
int  lpfc0_log_verbose  = -1;
int  lpfc1_log_verbose  = -1;
int  lpfc2_log_verbose  = -1;
int  lpfc3_log_verbose  = -1;
int  lpfc4_log_verbose  = -1;
int  lpfc5_log_verbose  = -1;
int  lpfc6_log_verbose  = -1;
int  lpfc7_log_verbose  = -1;
int  lpfc8_log_verbose  = -1;
int  lpfc9_log_verbose  = -1;
int  lpfc10_log_verbose = -1;
int  lpfc11_log_verbose = -1;
int  lpfc12_log_verbose = -1;
int  lpfc13_log_verbose = -1;
int  lpfc14_log_verbose = -1;
int  lpfc15_log_verbose = -1;
int  lpfc16_log_verbose = -1;
int  lpfc17_log_verbose = -1;
int  lpfc18_log_verbose = -1;
int  lpfc19_log_verbose = -1;
int  lpfc20_log_verbose = -1;
int  lpfc21_log_verbose = -1;
int  lpfc22_log_verbose = -1;
int  lpfc23_log_verbose = -1;
int  lpfc24_log_verbose = -1;
int  lpfc25_log_verbose = -1;
int  lpfc26_log_verbose = -1;
int  lpfc27_log_verbose = -1;
int  lpfc28_log_verbose = -1;
int  lpfc29_log_verbose = -1;
int  lpfc30_log_verbose = -1;
int  lpfc31_log_verbose = -1;

/*
# lun_queue_depth:  This parameter is used to limit the number of outstanding
# commands per FCP LUN. Value range is [1,128]. Default value is 30.
*/
int lpfc_lun_queue_depth   = 30;
int lpfc0_lun_queue_depth  = -1;
int lpfc1_lun_queue_depth  = -1;
int lpfc2_lun_queue_depth  = -1;
int lpfc3_lun_queue_depth  = -1;
int lpfc4_lun_queue_depth  = -1;
int lpfc5_lun_queue_depth  = -1;
int lpfc6_lun_queue_depth  = -1;
int lpfc7_lun_queue_depth  = -1;
int lpfc8_lun_queue_depth  = -1;
int lpfc9_lun_queue_depth  = -1;
int lpfc10_lun_queue_depth = -1;
int lpfc11_lun_queue_depth = -1;
int lpfc12_lun_queue_depth = -1;
int lpfc13_lun_queue_depth = -1;
int lpfc14_lun_queue_depth = -1;
int lpfc15_lun_queue_depth = -1;
int lpfc16_lun_queue_depth = -1;
int lpfc17_lun_queue_depth = -1;
int lpfc18_lun_queue_depth = -1;
int lpfc19_lun_queue_depth = -1;
int lpfc20_lun_queue_depth = -1;
int lpfc21_lun_queue_depth = -1;
int lpfc22_lun_queue_depth = -1;
int lpfc23_lun_queue_depth = -1;
int lpfc24_lun_queue_depth = -1;
int lpfc25_lun_queue_depth = -1;
int lpfc26_lun_queue_depth = -1;
int lpfc27_lun_queue_depth = -1;
int lpfc28_lun_queue_depth = -1;
int lpfc29_lun_queue_depth = -1;
int lpfc30_lun_queue_depth = -1;
int lpfc31_lun_queue_depth = -1;

/*
# tgt_queue_depth: It is used to limit the number of outstanding commands
# per FCP target. If tgt_queue_depth = 0, the driver will internally use a
# value appropriate to the FC hardware adapter. Value range is [0,10240]. 
# Default value is 0.
*/
int lpfc_tgt_queue_depth    = 0 ;
int lpfc0_tgt_queue_depth   = -1;
int lpfc1_tgt_queue_depth   = -1;
int lpfc2_tgt_queue_depth   = -1;
int lpfc3_tgt_queue_depth   = -1;
int lpfc4_tgt_queue_depth   = -1;
int lpfc5_tgt_queue_depth   = -1;
int lpfc6_tgt_queue_depth   = -1;
int lpfc7_tgt_queue_depth   = -1;
int lpfc8_tgt_queue_depth   = -1;
int lpfc9_tgt_queue_depth   = -1;
int lpfc10_tgt_queue_depth  = -1;
int lpfc11_tgt_queue_depth  = -1;
int lpfc12_tgt_queue_depth  = -1;
int lpfc13_tgt_queue_depth  = -1;
int lpfc14_tgt_queue_depth  = -1;
int lpfc15_tgt_queue_depth  = -1;
int lpfc16_tgt_queue_depth  = -1;
int lpfc17_tgt_queue_depth  = -1;
int lpfc18_tgt_queue_depth  = -1;
int lpfc19_tgt_queue_depth  = -1;
int lpfc20_tgt_queue_depth  = -1;
int lpfc21_tgt_queue_depth  = -1;
int lpfc22_tgt_queue_depth  = -1;
int lpfc23_tgt_queue_depth  = -1;
int lpfc24_tgt_queue_depth  = -1;
int lpfc25_tgt_queue_depth  = -1;
int lpfc26_tgt_queue_depth  = -1;
int lpfc27_tgt_queue_depth  = -1;
int lpfc28_tgt_queue_depth  = -1;
int lpfc29_tgt_queue_depth  = -1;
int lpfc30_tgt_queue_depth  = -1;
int lpfc31_tgt_queue_depth  = -1;

/*
# no_device_delay: determines the length of the interval between deciding to
# fail back an I/O because there is no way to communicate with its particular
# device (e.g., due to device failure) and the actual fail back.  A value of
# zero implies no delay whatsoever.
# Cautions:  
# (1)  This value is in seconds.  
# (2)  Setting a long delay value may permit I/O to build up, each with a
# pending timeout, which could result in the exhaustion of critical kernel
# resources. 
# Value range is [0,30]. Default value is 1.
#
# Note that this value can have an impact on the speed with which a
# system can shut down with I/Os pending and with the HBA not able to
# communicate with the loop or fabric, e.g., with a cable pulled.
*/
int  lpfc_no_device_delay    =  1;
int  lpfc0_no_device_delay   = -1;
int  lpfc1_no_device_delay   = -1;
int  lpfc2_no_device_delay   = -1;
int  lpfc3_no_device_delay   = -1;
int  lpfc4_no_device_delay   = -1;
int  lpfc5_no_device_delay   = -1;
int  lpfc6_no_device_delay   = -1;
int  lpfc7_no_device_delay   = -1;
int  lpfc8_no_device_delay   = -1;
int  lpfc9_no_device_delay   = -1;
int  lpfc10_no_device_delay  = -1;
int  lpfc11_no_device_delay  = -1;
int  lpfc12_no_device_delay  = -1;
int  lpfc13_no_device_delay  = -1;
int  lpfc14_no_device_delay  = -1;
int  lpfc15_no_device_delay  = -1;
int  lpfc16_no_device_delay  = -1;
int  lpfc17_no_device_delay  = -1;
int  lpfc18_no_device_delay  = -1;
int  lpfc19_no_device_delay  = -1;
int  lpfc20_no_device_delay  = -1;
int  lpfc21_no_device_delay  = -1;
int  lpfc22_no_device_delay  = -1;
int  lpfc23_no_device_delay  = -1;
int  lpfc24_no_device_delay  = -1;
int  lpfc25_no_device_delay  = -1;
int  lpfc26_no_device_delay  = -1;
int  lpfc27_no_device_delay  = -1;
int  lpfc28_no_device_delay  = -1;
int  lpfc29_no_device_delay  = -1;
int  lpfc30_no_device_delay  = -1;
int  lpfc31_no_device_delay  = -1;

/*
# xmt_que_size:  This is the size of the transmit queue for mbufs. Value
# range is [128,10240]. Default value is 256.
*/
int lpfc_xmt_que_size  = 256;
int lpfc0_xmt_que_size  = -1;
int lpfc1_xmt_que_size  = -1;
int lpfc2_xmt_que_size  = -1;
int lpfc3_xmt_que_size  = -1;
int lpfc4_xmt_que_size  = -1;
int lpfc5_xmt_que_size  = -1;
int lpfc6_xmt_que_size  = -1;
int lpfc7_xmt_que_size  = -1;
int lpfc8_xmt_que_size  = -1;
int lpfc9_xmt_que_size  = -1;
int lpfc10_xmt_que_size = -1;
int lpfc11_xmt_que_size = -1;
int lpfc12_xmt_que_size = -1;
int lpfc13_xmt_que_size = -1;
int lpfc14_xmt_que_size = -1;
int lpfc15_xmt_que_size = -1;
int lpfc16_xmt_que_size = -1;
int lpfc17_xmt_que_size = -1;
int lpfc18_xmt_que_size = -1;
int lpfc19_xmt_que_size = -1;
int lpfc20_xmt_que_size = -1;
int lpfc21_xmt_que_size = -1;
int lpfc22_xmt_que_size = -1;
int lpfc23_xmt_que_size = -1;
int lpfc24_xmt_que_size = -1;
int lpfc25_xmt_que_size = -1;
int lpfc26_xmt_que_size = -1;
int lpfc27_xmt_que_size = -1;
int lpfc28_xmt_que_size = -1;
int lpfc29_xmt_que_size = -1;
int lpfc30_xmt_que_size = -1;
int lpfc31_xmt_que_size = -1;

/*
# lpfc_linkdown_tmo: Determine how long the driver will wait to begin
# linkdown processing when a cable has been pulled or the link has
# otherwise become inaccessible.  Linkdown processing includes failing back 
# cmds to the target driver that have been waiting around for the link
# to come back up.  There's a tradeoff here:  small values of the timer
# cause the link to appear to "bounce", while large values of the
# timer can delay redundent HBA recovery in a fault tolerant environment.
# Units are in seconds. A value of 0 means never failback cmds until the
# link comes up. Value range is [0,255]. Default value is 30.
*/
int  lpfc_linkdown_tmo   = 30;
int  lpfc0_linkdown_tmo  = -1;
int  lpfc1_linkdown_tmo  = -1;
int  lpfc2_linkdown_tmo  = -1;
int  lpfc3_linkdown_tmo  = -1;
int  lpfc4_linkdown_tmo  = -1;
int  lpfc5_linkdown_tmo  = -1;
int  lpfc6_linkdown_tmo  = -1;
int  lpfc7_linkdown_tmo  = -1;
int  lpfc8_linkdown_tmo  = -1;
int  lpfc9_linkdown_tmo  = -1;
int  lpfc10_linkdown_tmo = -1;
int  lpfc11_linkdown_tmo = -1;
int  lpfc12_linkdown_tmo = -1;
int  lpfc13_linkdown_tmo = -1;
int  lpfc14_linkdown_tmo = -1;
int  lpfc15_linkdown_tmo = -1;
int  lpfc16_linkdown_tmo = -1;
int  lpfc17_linkdown_tmo = -1;
int  lpfc18_linkdown_tmo = -1;
int  lpfc19_linkdown_tmo = -1;
int  lpfc20_linkdown_tmo = -1;
int  lpfc21_linkdown_tmo = -1;
int  lpfc22_linkdown_tmo = -1;
int  lpfc23_linkdown_tmo = -1;
int  lpfc24_linkdown_tmo = -1;
int  lpfc25_linkdown_tmo = -1;
int  lpfc26_linkdown_tmo = -1;
int  lpfc27_linkdown_tmo = -1;
int  lpfc28_linkdown_tmo = -1;
int  lpfc29_linkdown_tmo = -1;
int  lpfc30_linkdown_tmo = -1;
int  lpfc31_linkdown_tmo = -1;

/*
# lpfc_nodev_holdio: If set, it will hold all I/O errors on devices that
# disappear until they come back. Value range is [0,1].  Default value is 0.
*/
int  lpfc_nodev_holdio   =  0;
int  lpfc0_nodev_holdio  = -1;
int  lpfc1_nodev_holdio  = -1;
int  lpfc2_nodev_holdio  = -1;
int  lpfc3_nodev_holdio  = -1;
int  lpfc4_nodev_holdio  = -1;
int  lpfc5_nodev_holdio  = -1;
int  lpfc6_nodev_holdio  = -1;
int  lpfc7_nodev_holdio  = -1;
int  lpfc8_nodev_holdio  = -1;
int  lpfc9_nodev_holdio  = -1;
int  lpfc10_nodev_holdio = -1;
int  lpfc11_nodev_holdio = -1;
int  lpfc12_nodev_holdio = -1;
int  lpfc13_nodev_holdio = -1;
int  lpfc14_nodev_holdio = -1;
int  lpfc15_nodev_holdio = -1;
int  lpfc16_nodev_holdio = -1;
int  lpfc17_nodev_holdio = -1;
int  lpfc18_nodev_holdio = -1;
int  lpfc19_nodev_holdio = -1;
int  lpfc20_nodev_holdio = -1;
int  lpfc21_nodev_holdio = -1;
int  lpfc22_nodev_holdio = -1;
int  lpfc23_nodev_holdio = -1;
int  lpfc24_nodev_holdio = -1;
int  lpfc25_nodev_holdio = -1;
int  lpfc26_nodev_holdio = -1;
int  lpfc27_nodev_holdio = -1;
int  lpfc28_nodev_holdio = -1;
int  lpfc29_nodev_holdio = -1;
int  lpfc30_nodev_holdio = -1;
int  lpfc31_nodev_holdio = -1;

/*
# lpfc_nodev_tmo: If set, it will hold all I/O errors on devices that disappear
# until the timer expires. Value range is [0,255]. Default value is 30.
*/
int  lpfc_nodev_tmo   = 30;
int  lpfc0_nodev_tmo  = -1;
int  lpfc1_nodev_tmo  = -1;
int  lpfc2_nodev_tmo  = -1;
int  lpfc3_nodev_tmo  = -1;
int  lpfc4_nodev_tmo  = -1;
int  lpfc5_nodev_tmo  = -1;
int  lpfc6_nodev_tmo  = -1;
int  lpfc7_nodev_tmo  = -1;
int  lpfc8_nodev_tmo  = -1;
int  lpfc9_nodev_tmo  = -1;
int  lpfc10_nodev_tmo = -1;
int  lpfc11_nodev_tmo = -1;
int  lpfc12_nodev_tmo = -1;
int  lpfc13_nodev_tmo = -1;
int  lpfc14_nodev_tmo = -1;
int  lpfc15_nodev_tmo = -1;
int  lpfc16_nodev_tmo = -1;
int  lpfc17_nodev_tmo = -1;
int  lpfc18_nodev_tmo = -1;
int  lpfc19_nodev_tmo = -1;
int  lpfc20_nodev_tmo = -1;
int  lpfc21_nodev_tmo = -1;
int  lpfc22_nodev_tmo = -1;
int  lpfc23_nodev_tmo = -1;
int  lpfc24_nodev_tmo = -1;
int  lpfc25_nodev_tmo = -1;
int  lpfc26_nodev_tmo = -1;
int  lpfc27_nodev_tmo = -1;
int  lpfc28_nodev_tmo = -1;
int  lpfc29_nodev_tmo = -1;
int  lpfc30_nodev_tmo = -1;
int  lpfc31_nodev_tmo = -1;

/*
# lpfc_delay_rsp_err: Use this to delay FCP RSP errors and certain check
# conditions. Value range is [0,1]. Default value is 0.
*/
int lpfc_delay_rsp_err   =  0;
int lpfc0_delay_rsp_err  = -1;
int lpfc1_delay_rsp_err  = -1;
int lpfc2_delay_rsp_err  = -1;
int lpfc3_delay_rsp_err  = -1;
int lpfc4_delay_rsp_err  = -1;
int lpfc5_delay_rsp_err  = -1;
int lpfc6_delay_rsp_err  = -1;
int lpfc7_delay_rsp_err  = -1;
int lpfc8_delay_rsp_err  = -1;
int lpfc9_delay_rsp_err  = -1;
int lpfc10_delay_rsp_err = -1;
int lpfc11_delay_rsp_err = -1;
int lpfc12_delay_rsp_err = -1;
int lpfc13_delay_rsp_err = -1;
int lpfc14_delay_rsp_err = -1;
int lpfc15_delay_rsp_err = -1;
int lpfc16_delay_rsp_err = -1;
int lpfc17_delay_rsp_err = -1;
int lpfc18_delay_rsp_err = -1;
int lpfc19_delay_rsp_err = -1;
int lpfc20_delay_rsp_err = -1;
int lpfc21_delay_rsp_err = -1;
int lpfc22_delay_rsp_err = -1;
int lpfc23_delay_rsp_err = -1;
int lpfc24_delay_rsp_err = -1;
int lpfc25_delay_rsp_err = -1;
int lpfc26_delay_rsp_err = -1;
int lpfc27_delay_rsp_err = -1;
int lpfc28_delay_rsp_err = -1;
int lpfc29_delay_rsp_err = -1;
int lpfc30_delay_rsp_err = -1;
int lpfc31_delay_rsp_err = -1;

/*
# lpfc_check_cond_err: Treat certain check conditions as a FCP error. Value
# range is [0,1]. Default value is 0.
*/
int lpfc_check_cond_err   =  0;
int lpfc0_check_cond_err  = -1;
int lpfc1_check_cond_err  = -1;
int lpfc2_check_cond_err  = -1;
int lpfc3_check_cond_err  = -1;
int lpfc4_check_cond_err  = -1;
int lpfc5_check_cond_err  = -1;
int lpfc6_check_cond_err  = -1;
int lpfc7_check_cond_err  = -1;
int lpfc8_check_cond_err  = -1;
int lpfc9_check_cond_err  = -1;
int lpfc10_check_cond_err = -1;
int lpfc11_check_cond_err = -1;
int lpfc12_check_cond_err = -1;
int lpfc13_check_cond_err = -1;
int lpfc14_check_cond_err = -1;
int lpfc15_check_cond_err = -1;
int lpfc16_check_cond_err = -1;
int lpfc17_check_cond_err = -1;
int lpfc18_check_cond_err = -1;
int lpfc19_check_cond_err = -1;
int lpfc20_check_cond_err = -1;
int lpfc21_check_cond_err = -1;
int lpfc22_check_cond_err = -1;
int lpfc23_check_cond_err = -1;
int lpfc24_check_cond_err = -1;
int lpfc25_check_cond_err = -1;
int lpfc26_check_cond_err = -1;
int lpfc27_check_cond_err = -1;
int lpfc28_check_cond_err = -1;
int lpfc29_check_cond_err = -1;
int lpfc30_check_cond_err = -1;
int lpfc31_check_cond_err = -1;

/*
# lpfc_topology:  link topology for init link
#            0x0  = attempt loop mode then point-to-point
#            0x02 = attempt point-to-point mode only
#            0x04 = attempt loop mode only 
#            0x06 = attempt point-to-point mode then loop
# Set point-to-point mode if you want to run as an N_Port.
# Set loop mode if you want to run as an NL_Port. Value range is [0,0x6].
# Default value is 0.
*/
int lpfc_topology   =   0x0;
int lpfc0_topology  =  -1;
int lpfc1_topology  =  -1;
int lpfc2_topology  =  -1;
int lpfc3_topology  =  -1;
int lpfc4_topology  =  -1;
int lpfc5_topology  =  -1;
int lpfc6_topology  =  -1;
int lpfc7_topology  =  -1;
int lpfc8_topology  =  -1;
int lpfc9_topology  =  -1;
int lpfc10_topology =  -1;
int lpfc11_topology =  -1;
int lpfc12_topology =  -1;
int lpfc13_topology =  -1;
int lpfc14_topology =  -1;
int lpfc15_topology =  -1;
int lpfc16_topology =  -1;
int lpfc17_topology =  -1;
int lpfc18_topology =  -1;
int lpfc19_topology =  -1;
int lpfc20_topology =  -1;
int lpfc21_topology =  -1;
int lpfc22_topology =  -1;
int lpfc23_topology =  -1;
int lpfc24_topology =  -1;
int lpfc25_topology =  -1;
int lpfc26_topology =  -1;
int lpfc27_topology =  -1;
int lpfc28_topology =  -1;
int lpfc29_topology =  -1;
int lpfc30_topology =  -1;
int lpfc31_topology =  -1;

/*
# lpfc_link_speed: Link speed selection for initializing the Fibre Channel
# connection.
#       0 = auto select (default)
#       1 = 1 Gigabaud
#       2 = 2 Gigabaud
#       4 = 4 Gigabaud
# Value range is [0,4]. Default value is 0.
*/
int  lpfc_link_speed   =  0;
int  lpfc0_link_speed  = -1;
int  lpfc1_link_speed  = -1;
int  lpfc2_link_speed  = -1;
int  lpfc3_link_speed  = -1;
int  lpfc4_link_speed  = -1;
int  lpfc5_link_speed  = -1;
int  lpfc6_link_speed  = -1;
int  lpfc7_link_speed  = -1;
int  lpfc8_link_speed  = -1;
int  lpfc9_link_speed  = -1;
int  lpfc10_link_speed = -1;
int  lpfc11_link_speed = -1;
int  lpfc12_link_speed = -1;
int  lpfc13_link_speed = -1;
int  lpfc14_link_speed = -1;
int  lpfc15_link_speed = -1;
int  lpfc16_link_speed = -1;
int  lpfc17_link_speed = -1;
int  lpfc18_link_speed = -1;
int  lpfc19_link_speed = -1;
int  lpfc20_link_speed = -1;
int  lpfc21_link_speed = -1;
int  lpfc22_link_speed = -1;
int  lpfc23_link_speed = -1;
int  lpfc24_link_speed = -1;
int  lpfc25_link_speed = -1;
int  lpfc26_link_speed = -1;
int  lpfc27_link_speed = -1;
int  lpfc28_link_speed = -1;
int  lpfc29_link_speed = -1;
int  lpfc30_link_speed = -1;
int  lpfc31_link_speed = -1;

/*
# lpfc_fcp_class:  Determines FC class to use for the FCP protocol.
# Value range is [2,3]. Default value is 3.
*/
int lpfc_fcp_class   =  3;
int lpfc0_fcp_class  = -1;
int lpfc1_fcp_class  = -1;
int lpfc2_fcp_class  = -1;
int lpfc3_fcp_class  = -1;
int lpfc4_fcp_class  = -1;
int lpfc5_fcp_class  = -1;
int lpfc6_fcp_class  = -1;
int lpfc7_fcp_class  = -1;
int lpfc8_fcp_class  = -1;
int lpfc9_fcp_class  = -1;
int lpfc10_fcp_class = -1;
int lpfc11_fcp_class = -1;
int lpfc12_fcp_class = -1;
int lpfc13_fcp_class = -1;
int lpfc14_fcp_class = -1;
int lpfc15_fcp_class = -1;
int lpfc16_fcp_class = -1;
int lpfc17_fcp_class = -1;
int lpfc18_fcp_class = -1;
int lpfc19_fcp_class = -1;
int lpfc20_fcp_class = -1;
int lpfc21_fcp_class = -1;
int lpfc22_fcp_class = -1;
int lpfc23_fcp_class = -1;
int lpfc24_fcp_class = -1;
int lpfc25_fcp_class = -1;
int lpfc26_fcp_class = -1;
int lpfc27_fcp_class = -1;
int lpfc28_fcp_class = -1;
int lpfc29_fcp_class = -1;
int lpfc30_fcp_class = -1;
int lpfc31_fcp_class = -1;

/*
# lpfc_use_adisc: Use ADISC for FCP rediscovery instead of PLOGI. Value range
# is [0,1]. Default value is 0.
*/
int  lpfc_use_adisc   =  0;
int  lpfc0_use_adisc  = -1; 
int  lpfc1_use_adisc  = -1; 
int  lpfc2_use_adisc  = -1; 
int  lpfc3_use_adisc  = -1; 
int  lpfc4_use_adisc  = -1; 
int  lpfc5_use_adisc  = -1; 
int  lpfc6_use_adisc  = -1; 
int  lpfc7_use_adisc  = -1; 
int  lpfc8_use_adisc  = -1; 
int  lpfc9_use_adisc  = -1; 
int  lpfc10_use_adisc = -1; 
int  lpfc11_use_adisc = -1; 
int  lpfc12_use_adisc = -1; 
int  lpfc13_use_adisc = -1; 
int  lpfc14_use_adisc = -1; 
int  lpfc15_use_adisc = -1; 
int  lpfc16_use_adisc = -1; 
int  lpfc17_use_adisc = -1; 
int  lpfc18_use_adisc = -1; 
int  lpfc19_use_adisc = -1; 
int  lpfc20_use_adisc = -1; 
int  lpfc21_use_adisc = -1; 
int  lpfc22_use_adisc = -1; 
int  lpfc23_use_adisc = -1; 
int  lpfc24_use_adisc = -1; 
int  lpfc25_use_adisc = -1; 
int  lpfc26_use_adisc = -1; 
int  lpfc27_use_adisc = -1; 
int  lpfc28_use_adisc = -1; 
int  lpfc29_use_adisc = -1; 
int  lpfc30_use_adisc = -1; 
int  lpfc31_use_adisc = -1; 

/*
# lpfc_extra_io_tmo: Extra FCP timeout for fabrics. Value range is [0,255].
# Default value is 0.
*/
int  lpfc_extra_io_tmo   =  0;
int  lpfc0_extra_io_tmo  = -1;
int  lpfc1_extra_io_tmo  = -1;
int  lpfc2_extra_io_tmo  = -1;
int  lpfc3_extra_io_tmo  = -1;
int  lpfc4_extra_io_tmo  = -1;
int  lpfc5_extra_io_tmo  = -1;
int  lpfc6_extra_io_tmo  = -1;
int  lpfc7_extra_io_tmo  = -1;
int  lpfc8_extra_io_tmo  = -1;
int  lpfc9_extra_io_tmo  = -1;
int  lpfc10_extra_io_tmo = -1;
int  lpfc11_extra_io_tmo = -1;
int  lpfc12_extra_io_tmo = -1;
int  lpfc13_extra_io_tmo = -1;
int  lpfc14_extra_io_tmo = -1;
int  lpfc15_extra_io_tmo = -1;
int  lpfc16_extra_io_tmo = -1;
int  lpfc17_extra_io_tmo = -1;
int  lpfc18_extra_io_tmo = -1;
int  lpfc19_extra_io_tmo = -1;
int  lpfc20_extra_io_tmo = -1;
int  lpfc21_extra_io_tmo = -1;
int  lpfc22_extra_io_tmo = -1;
int  lpfc23_extra_io_tmo = -1;
int  lpfc24_extra_io_tmo = -1;
int  lpfc25_extra_io_tmo = -1;
int  lpfc26_extra_io_tmo = -1;
int  lpfc27_extra_io_tmo = -1;
int  lpfc28_extra_io_tmo = -1;
int  lpfc29_extra_io_tmo = -1;
int  lpfc30_extra_io_tmo = -1;
int  lpfc31_extra_io_tmo = -1;

/*
# lpfc_dqfull_throttle_up_time: Use dqfull-throttle-up-time to specify when to
# increment the current Q depth. This variable is in seconds. Value range
# is [0,30]. Default value is 1.
*/
int lpfc_dqfull_throttle_up_time   =  1;
int lpfc0_dqfull_throttle_up_time  = -1;
int lpfc1_dqfull_throttle_up_time  = -1;
int lpfc2_dqfull_throttle_up_time  = -1;
int lpfc3_dqfull_throttle_up_time  = -1;
int lpfc4_dqfull_throttle_up_time  = -1;
int lpfc5_dqfull_throttle_up_time  = -1;
int lpfc6_dqfull_throttle_up_time  = -1;
int lpfc7_dqfull_throttle_up_time  = -1;
int lpfc8_dqfull_throttle_up_time  = -1;
int lpfc9_dqfull_throttle_up_time  = -1;
int lpfc10_dqfull_throttle_up_time = -1;
int lpfc11_dqfull_throttle_up_time = -1;
int lpfc12_dqfull_throttle_up_time = -1;
int lpfc13_dqfull_throttle_up_time = -1;
int lpfc14_dqfull_throttle_up_time = -1;
int lpfc15_dqfull_throttle_up_time = -1;
int lpfc16_dqfull_throttle_up_time = -1;
int lpfc17_dqfull_throttle_up_time = -1;
int lpfc18_dqfull_throttle_up_time = -1;
int lpfc19_dqfull_throttle_up_time = -1;
int lpfc20_dqfull_throttle_up_time = -1;
int lpfc21_dqfull_throttle_up_time = -1;
int lpfc22_dqfull_throttle_up_time = -1;
int lpfc23_dqfull_throttle_up_time = -1;
int lpfc24_dqfull_throttle_up_time = -1;
int lpfc25_dqfull_throttle_up_time = -1;
int lpfc26_dqfull_throttle_up_time = -1;
int lpfc27_dqfull_throttle_up_time = -1;
int lpfc28_dqfull_throttle_up_time = -1;
int lpfc29_dqfull_throttle_up_time = -1;
int lpfc30_dqfull_throttle_up_time = -1;
int lpfc31_dqfull_throttle_up_time = -1;

/*
# lpfc_dqfull_throttle_up_inc: Increment the current Q depth by 
# dqfull-throttle-up-inc. Value range is [0,128]. Default value is 1.
*/
int lpfc_dqfull_throttle_up_inc   =  1;
int lpfc0_dqfull_throttle_up_inc  = -1;
int lpfc1_dqfull_throttle_up_inc  = -1;
int lpfc2_dqfull_throttle_up_inc  = -1;
int lpfc3_dqfull_throttle_up_inc  = -1;
int lpfc4_dqfull_throttle_up_inc  = -1;
int lpfc5_dqfull_throttle_up_inc  = -1;
int lpfc6_dqfull_throttle_up_inc  = -1;
int lpfc7_dqfull_throttle_up_inc  = -1;
int lpfc8_dqfull_throttle_up_inc  = -1;
int lpfc9_dqfull_throttle_up_inc  = -1;
int lpfc10_dqfull_throttle_up_inc = -1;
int lpfc11_dqfull_throttle_up_inc = -1;
int lpfc12_dqfull_throttle_up_inc = -1;
int lpfc13_dqfull_throttle_up_inc = -1;
int lpfc14_dqfull_throttle_up_inc = -1;
int lpfc15_dqfull_throttle_up_inc = -1;
int lpfc16_dqfull_throttle_up_inc = -1;
int lpfc17_dqfull_throttle_up_inc = -1;
int lpfc18_dqfull_throttle_up_inc = -1;
int lpfc19_dqfull_throttle_up_inc = -1;
int lpfc20_dqfull_throttle_up_inc = -1;
int lpfc21_dqfull_throttle_up_inc = -1;
int lpfc22_dqfull_throttle_up_inc = -1;
int lpfc23_dqfull_throttle_up_inc = -1;
int lpfc24_dqfull_throttle_up_inc = -1;
int lpfc25_dqfull_throttle_up_inc = -1;
int lpfc26_dqfull_throttle_up_inc = -1;
int lpfc27_dqfull_throttle_up_inc = -1;
int lpfc28_dqfull_throttle_up_inc = -1;
int lpfc29_dqfull_throttle_up_inc = -1;
int lpfc30_dqfull_throttle_up_inc = -1;
int lpfc31_dqfull_throttle_up_inc = -1;

/*
# lpfc_ack0: Use ACK0, instead of ACK1 for class 2 acknowledgement. Value
# range is [0,1]. Default value is 0.
*/
int  lpfc_ack0   =  0;
int  lpfc0_ack0  = -1;
int  lpfc1_ack0  = -1;
int  lpfc2_ack0  = -1;
int  lpfc3_ack0  = -1;
int  lpfc4_ack0  = -1;
int  lpfc5_ack0  = -1;
int  lpfc6_ack0  = -1;
int  lpfc7_ack0  = -1;
int  lpfc8_ack0  = -1;
int  lpfc9_ack0  = -1;
int  lpfc10_ack0 = -1;
int  lpfc11_ack0 = -1;
int  lpfc12_ack0 = -1;
int  lpfc13_ack0 = -1;
int  lpfc14_ack0 = -1;
int  lpfc15_ack0 = -1;
int  lpfc16_ack0 = -1;
int  lpfc17_ack0 = -1;
int  lpfc18_ack0 = -1;
int  lpfc19_ack0 = -1;
int  lpfc20_ack0 = -1;
int  lpfc21_ack0 = -1;
int  lpfc22_ack0 = -1;
int  lpfc23_ack0 = -1;
int  lpfc24_ack0 = -1;
int  lpfc25_ack0 = -1;
int  lpfc26_ack0 = -1;
int  lpfc27_ack0 = -1;
int  lpfc28_ack0 = -1;
int  lpfc29_ack0 = -1;
int  lpfc30_ack0 = -1;
int  lpfc31_ack0 = -1;

/* 
# lpfc_cr_delay & lpfc_cr_count: Default values for I/O coalescing 
# cr_delay (msec) or cr_count outstanding commands. cr_delay can take
# value [0,63]. cr_count can take value [1,255]. Default value of cr_delay
# is 0. Default value of cr_count is 1. The cr_count feature is disabled if
# cr_delay is set to 0.
*/
int  lpfc_cr_delay   =  0;
int  lpfc0_cr_delay  = -1;
int  lpfc1_cr_delay  = -1;
int  lpfc2_cr_delay  = -1;
int  lpfc3_cr_delay  = -1;
int  lpfc4_cr_delay  = -1;
int  lpfc5_cr_delay  = -1;
int  lpfc6_cr_delay  = -1;
int  lpfc7_cr_delay  = -1;
int  lpfc8_cr_delay  = -1;
int  lpfc9_cr_delay  = -1;
int  lpfc10_cr_delay = -1;
int  lpfc11_cr_delay = -1;
int  lpfc12_cr_delay = -1;
int  lpfc13_cr_delay = -1;
int  lpfc14_cr_delay = -1;
int  lpfc15_cr_delay = -1;
int  lpfc16_cr_delay = -1;
int  lpfc17_cr_delay = -1;
int  lpfc18_cr_delay = -1;
int  lpfc19_cr_delay = -1;
int  lpfc20_cr_delay = -1;
int  lpfc21_cr_delay = -1;
int  lpfc22_cr_delay = -1;
int  lpfc23_cr_delay = -1;
int  lpfc24_cr_delay = -1;
int  lpfc25_cr_delay = -1;
int  lpfc26_cr_delay = -1;
int  lpfc27_cr_delay = -1;
int  lpfc28_cr_delay = -1;
int  lpfc29_cr_delay = -1;
int  lpfc30_cr_delay = -1;
int  lpfc31_cr_delay = -1;

int  lpfc_cr_count   =  1;
int  lpfc0_cr_count  = -1;
int  lpfc1_cr_count  = -1;
int  lpfc2_cr_count  = -1;
int  lpfc3_cr_count  = -1;
int  lpfc4_cr_count  = -1;
int  lpfc5_cr_count  = -1;
int  lpfc6_cr_count  = -1;
int  lpfc7_cr_count  = -1;
int  lpfc8_cr_count  = -1;
int  lpfc9_cr_count  = -1;
int  lpfc10_cr_count = -1;
int  lpfc11_cr_count = -1;
int  lpfc12_cr_count = -1;
int  lpfc13_cr_count = -1;
int  lpfc14_cr_count = -1;
int  lpfc15_cr_count = -1;
int  lpfc16_cr_count = -1;
int  lpfc17_cr_count = -1;
int  lpfc18_cr_count = -1;
int  lpfc19_cr_count = -1;
int  lpfc20_cr_count = -1;
int  lpfc21_cr_count = -1;
int  lpfc22_cr_count = -1;
int  lpfc23_cr_count = -1;
int  lpfc24_cr_count = -1;
int  lpfc25_cr_count = -1;
int  lpfc26_cr_count = -1;
int  lpfc27_cr_count = -1;
int  lpfc28_cr_count = -1;
int  lpfc29_cr_count = -1;
int  lpfc30_cr_count = -1;
int  lpfc31_cr_count = -1;

/*
# lpfc_fdmi_on: controls FDMI support.
# 	0 = no FDMI support
#	1 = support FDMI without attribute of hostname
#	2 = support FDMI with attribute of hostname
# Value range [0,2]. Default value is 0.
*/
int  lpfc_fdmi_on   =  0;
int  lpfc0_fdmi_on  = -1;
int  lpfc1_fdmi_on  = -1;
int  lpfc2_fdmi_on  = -1;
int  lpfc3_fdmi_on  = -1;
int  lpfc4_fdmi_on  = -1;
int  lpfc5_fdmi_on  = -1;
int  lpfc6_fdmi_on  = -1;
int  lpfc7_fdmi_on  = -1;
int  lpfc8_fdmi_on  = -1;
int  lpfc9_fdmi_on  = -1;
int  lpfc10_fdmi_on = -1;
int  lpfc11_fdmi_on = -1;
int  lpfc12_fdmi_on = -1;
int  lpfc13_fdmi_on = -1;
int  lpfc14_fdmi_on = -1;
int  lpfc15_fdmi_on = -1;
int  lpfc16_fdmi_on = -1;
int  lpfc17_fdmi_on = -1;
int  lpfc18_fdmi_on = -1;
int  lpfc19_fdmi_on = -1;
int  lpfc20_fdmi_on = -1;
int  lpfc21_fdmi_on = -1;
int  lpfc22_fdmi_on = -1;
int  lpfc23_fdmi_on = -1;
int  lpfc24_fdmi_on = -1;
int  lpfc25_fdmi_on = -1;
int  lpfc26_fdmi_on = -1;
int  lpfc27_fdmi_on = -1;
int  lpfc28_fdmi_on = -1;
int  lpfc29_fdmi_on = -1;
int  lpfc30_fdmi_on = -1;
int  lpfc31_fdmi_on = -1;

/*
# lpfc_scsi_req_tmo: Time out value (in seconds) for SCSI request sent. 
# Value range is [0,255]. Default value is 30.
*/
int  lpfc_scsi_req_tmo   = 30;
int  lpfc0_scsi_req_tmo  = -1;
int  lpfc1_scsi_req_tmo  = -1;
int  lpfc2_scsi_req_tmo  = -1;
int  lpfc3_scsi_req_tmo  = -1;
int  lpfc4_scsi_req_tmo  = -1;
int  lpfc5_scsi_req_tmo  = -1;
int  lpfc6_scsi_req_tmo  = -1;
int  lpfc7_scsi_req_tmo  = -1;
int  lpfc8_scsi_req_tmo  = -1;
int  lpfc9_scsi_req_tmo  = -1;
int  lpfc10_scsi_req_tmo = -1;
int  lpfc11_scsi_req_tmo = -1;
int  lpfc12_scsi_req_tmo = -1;
int  lpfc13_scsi_req_tmo = -1;
int  lpfc14_scsi_req_tmo = -1;
int  lpfc15_scsi_req_tmo = -1;
int  lpfc16_scsi_req_tmo = -1;
int  lpfc17_scsi_req_tmo = -1;
int  lpfc18_scsi_req_tmo = -1;
int  lpfc19_scsi_req_tmo = -1;
int  lpfc20_scsi_req_tmo = -1;
int  lpfc21_scsi_req_tmo = -1;
int  lpfc22_scsi_req_tmo = -1;
int  lpfc23_scsi_req_tmo = -1;
int  lpfc24_scsi_req_tmo = -1;
int  lpfc25_scsi_req_tmo = -1;
int  lpfc26_scsi_req_tmo = -1;
int  lpfc27_scsi_req_tmo = -1;
int  lpfc28_scsi_req_tmo = -1;
int  lpfc29_scsi_req_tmo = -1;
int  lpfc30_scsi_req_tmo = -1;
int  lpfc31_scsi_req_tmo = -1;

/*
# lpfc_lun_skip : If this is set to 1, lpfc will fake out the LINUX scsi layer
# to allow it to detect all LUNs if there are LUN holes on a device.
*/
int  lpfc_lun_skip     = 0;
int  lpfc0_lun_skip    = -1;
int  lpfc1_lun_skip    = -1;
int  lpfc2_lun_skip    = -1;
int  lpfc3_lun_skip    = -1;
int  lpfc4_lun_skip    = -1;
int  lpfc5_lun_skip    = -1;
int  lpfc6_lun_skip    = -1;
int  lpfc7_lun_skip    = -1;
int  lpfc8_lun_skip    = -1;
int  lpfc9_lun_skip    = -1;
int  lpfc10_lun_skip   = -1;
int  lpfc11_lun_skip   = -1;
int  lpfc12_lun_skip   = -1;
int  lpfc13_lun_skip   = -1;
int  lpfc14_lun_skip   = -1;
int  lpfc15_lun_skip   = -1;
int  lpfc16_lun_skip   = -1;
int  lpfc17_lun_skip   = -1;
int  lpfc18_lun_skip   = -1;
int  lpfc19_lun_skip   = -1;
int  lpfc20_lun_skip   = -1;
int  lpfc21_lun_skip   = -1;
int  lpfc22_lun_skip   = -1;
int  lpfc23_lun_skip   = -1;
int  lpfc24_lun_skip   = -1;
int  lpfc25_lun_skip   = -1;
int  lpfc26_lun_skip   = -1;
int  lpfc27_lun_skip   = -1;
int  lpfc28_lun_skip   = -1;
int  lpfc29_lun_skip   = -1;
int  lpfc30_lun_skip   = -1;
int  lpfc31_lun_skip   = -1;

/*
# lpfc_inq_pqb_filter : Some distributions does not handle peripheral qualifier
# bit in the INQUIRY response set to 1. If this parameter is set, lpfc
# driver will change the peripheral qualifier bit from 1 to 3 for INQUIRY 
# responses.
*/
int lpfc_inq_pqb_filter = 0;

#endif
